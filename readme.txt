一、项目简介
       这是一个基于 UDP 协议的网络通信程序，模拟实现了类似 TCP 的连接管理、数据传输及丢包处理机制。程序包含服务器端和客户端，支持三次握手建立连接、数据分块传输、超时重传、丢包模拟及网络性能统计等功能，可用于学习和测试 UDP 协议在复杂网络环境下的传输特性。
二、运行环境
       1.操作系统：Windows
       2.软件依赖：Python 3.13.2
       3.运行方式：PyCharm
三、程序结构
       1.服务器端（UDPServer）
		基于 UDP 协议的多线程服务器：支持同时处理多个客户端连接，通过线程池机制响应客户端请求。
		连接管理：实现三次握手（SYN/SYN-ACK/ACK）和四次挥手（FIN/FIN-ACK）的连接生命周期管理。
		丢包模拟：可配置客户端到服务器的丢包率（默认 30%），用于测试网络不稳定场景下的传输可靠性。
		数据处理：接收客户端发送的数据块，解析协议头部，记录传输统计信息（发送 / 丢弃包数）。
	2.客户端（UDPClient）
		连接建立：通过三次握手与服务器建立逻辑连接，支持超时重传和指数退避策略。
		滑动窗口机制：实现 400 字节固定窗口大小的流量控制，动态调整发送窗口内的数据包数量。
		超时重传：基于 RTT（往返时间）动态调整超时阈值，采用中位数算法优化稳定性，支持窗口内数据包批量重传。
		性能统计：记录 RTT、丢包率、重传次数等指标，使用 pandas 生成统计汇总报告。
四、运行方式
	1.启动服务器
		bash
		python udpServer.py
		可选配置（修改代码默认值）
		host：服务器监听 IP（默认 127.0.0.1）
		port：服务器监听端口（默认 8080）
		drop_rate：客户端→服务器丢包率（默认 0.3，即 30%）
	2.启动客户端
		bash
		python udpClient.py <服务器IP> <服务器端口>
		参数说明
		<服务器IP>：服务器的 IP 地址（如 127.0.0.1）
		<服务器端口>：服务器的端口号（如 8080）
五、协议说明
	1.自定义 UDP 协议头部格式

字段					长度			说明
Type（类型）			4 bits	支持 16 种类型，1=SYN，2=SYN-ACK，3=DATA，4=ACK，5=FIN
Reserved（保留位）	4 bits	预留字段，当前设为 0x0F
Sequence（序列号）	2 字节	数据包顺序编号（0~65535）
Ack（确认号）		2 字节	期望接收的下一个数据包序号
Windows（窗口大小）	2 字节	发送方接收窗口大小（固定 400 字节）
Length（数据长度）	1 字节	负载数据长度（0~255 字节）
六、传输机制说明
	1.连接管理
		三次握手：客户端发送 SYN→服务器回复 SYN-ACK→客户端确认 ACK
	2.丢包与重传
		(1)丢包模拟：服务器按配置丢包率（默认 30%）随机丢弃接收到的 DATA 包
		(2)超时重传：客户端超时后重传窗口内所有未确认数据包，超时时间基于 RTT 动态调整
		(3)RTT 计算：记录每个数据包的发送和确认时间，使用最近 10 个 RTT 的中位数调整超时阈值
	3.统计指标
		(1)模拟丢包率：服务器配置的丢包率（通过 CONFIG 报文传递给客户端）
		(2)实际丢包率：30/ 实际发送的udp packet number ×100%
		(3)RTT 统计：最大 / 最小 / 平均 RTT 及标准差，使用 pandas 进行数据处理和展示
七、典型运行流程
	1.启动服务器，监听指定端口
	2.客户端连接服务器，完成三次握手
	3.客户端按窗口机制分块发送数据（默认 30 个数据包）
	4.服务器接收数据，按配置模拟丢包并返回 ACK
	5.客户端接收 ACK，记录 RTT，调整超时时间
	6.数据传输完成后，客户端发送 FIN 断开连接
	7.客户端生成传输统计汇总报告，包含丢包率和 RTT 指标